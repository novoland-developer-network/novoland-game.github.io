{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","loadTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","initializeIcons","undefined","disableWarnings","boldStyle","root","fontWeight","FontWeights","semibold","App","isMobile","window","matchMedia","matches","_React$useState","React","useState","setIsOpen","Object","slicedToArray","isDarkMode","DarkMode","isActivated","react_default","a","createElement","Fragment","Stack","horizontalAlign","verticalAlign","verticalFill","styles","width","margin","textAlign","color","gap","Text","variant","DefaultButton","style","backgroundColor","primary","disabled","text","onClick","Boolean","location","hostname","match","mergeStyles","selectors",":global(body), :global(html), :global(#root)","padding","height","ReactDOM","render","Customizer","FluentCustomizations","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAOIA,EAAQC,YAAU,CAClBC,QAAS,CACLC,aAAc,UACdC,gBAAiB,UACjBC,aAAc,UACdC,WAAY,UACZC,cAAe,UACfC,eAAgB,UAChBC,aAAc,UACdC,UAAW,UACXC,YAAa,UACbC,kBAAmB,UACnBC,eAAgB,UAChBC,aAAc,UACdC,qBAAsB,UACtBC,kBAAmB,UACnBC,mBAAoB,UACpBC,gBAAiB,UACjBC,iBAAkB,UAClBC,kBAAmB,UACnBC,eAAgB,UAChBC,YAAa,UACbC,MAAO,UACPC,MAAO,aAKfC,iBAAgBC,EAAW,CAACC,iBAAiB,IAE7C,IAAMC,EAAY,CAACC,KAAM,CAACC,WAAYC,IAAYC,WAGrCC,EAAM,WACf,IAAMC,EAAWC,OAAOC,WAAW,sBAAsBC,QADpCC,EAMjBC,IAAMC,UAAS,GADdC,EALgBC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,MAWfM,GADS,IAAIC,KACSC,cAW5B,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,gBAAgB,SAChBC,cAAc,SACdC,cAAY,EACZC,OAAQ,CACJ1B,KAAM,CACF2B,MAAO,OACPC,OAAQ,SACRC,UAAW,SACXC,MAAO,YAGfC,IAAK,IAGLb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,QAAQ,aAAaP,OAAQ3B,GAAnC,YACAmB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,QAAU5B,EAAU,cAAgB,QAA1C,wCACAa,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,QAAQ,SAAd,kCACAf,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,QAAQ,QAAQP,OAAQ3B,GAA9B,0DAGAmB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACIC,MAAO,CACHC,gBACIrB,EACM5C,EAAME,QAAQqB,MACdvB,EAAME,QAAQY,cAG5BoD,SAAS,EAAMC,UAAU,EAAMC,KAAK,2BAAOC,QA7CzC,kBAAM5B,GAAU,yBCpClB6B,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCVNC,YAAY,CACVC,UAAW,CACTC,+CAAgD,CAC9CnB,OAAQ,EACRoB,QAAS,EACTC,OAAQ,YAKdC,IAASC,OACPjC,EAAAC,EAAAC,cAACgC,EAAA,EAAeC,IACdnC,EAAAC,EAAAC,cAACkC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.10dfe0b4.chunk.js","sourcesContent":["import React from 'react';\nimport {DefaultButton, FontWeights, loadTheme, Stack, Text} from 'office-ui-fabric-react';\nimport {initializeIcons} from '@uifabric/icons';\n// @ts-ignore\nimport DarkMode from 'darkmode-js';\n\n// 设定主题\nlet theme = loadTheme({\n    palette: {\n        themePrimary: '#0078d4',\n        themeLighterAlt: '#eff6fc',\n        themeLighter: '#deecf9',\n        themeLight: '#c7e0f4',\n        themeTertiary: '#71afe5',\n        themeSecondary: '#2b88d8',\n        themeDarkAlt: '#106ebe',\n        themeDark: '#005a9e',\n        themeDarker: '#004578',\n        neutralLighterAlt: '#f8f8f8',\n        neutralLighter: '#f4f4f4',\n        neutralLight: '#eaeaea',\n        neutralQuaternaryAlt: '#dadada',\n        neutralQuaternary: '#d0d0d0',\n        neutralTertiaryAlt: '#c8c8c8',\n        neutralTertiary: '#c2c2c2',\n        neutralSecondary: '#858585',\n        neutralPrimaryAlt: '#4b4b4b',\n        neutralPrimary: '#333333',\n        neutralDark: '#272727',\n        black: '#1d1d1d',\n        white: '#ffffff',\n    },\n});\n\n// 初始化图标\ninitializeIcons(undefined, {disableWarnings: true});\n\nconst boldStyle = {root: {fontWeight: FontWeights.semibold}};\n\n\nexport const App = () => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n\n    const [\n        // isOpen\n        ,setIsOpen\n    ] = React.useState(false);\n\n    const openPanel = () => setIsOpen(true);\n    // const dismissPanel = () => setIsOpen(false);\n    let darkMode = new DarkMode();\n    const isDarkMode = darkMode.isActivated();\n\n    // if (!isDarkMode) {\n    //     new DarkMode({\n    //         mixColor: theme.palette.neutralLight, // default: '#fff'\n    //         backgroundColor: theme.palette.neutralLight,  // default: '#fff'\n    //         saveInCookies: false, // default: true,\n    //         autoMatchOsTheme: true // default: true\n    //     })\n    // }\n\n    return (\n        <>\n            <Stack\n                horizontalAlign=\"center\"\n                verticalAlign=\"center\"\n                verticalFill\n                styles={{\n                    root: {\n                        width: '100%',\n                        margin: '0 auto',\n                        textAlign: 'center',\n                        color: '#605e5c'\n                    }\n                }}\n                gap={15}\n            >\n\n                <Text variant=\"xLargePlus\" styles={boldStyle}>Novoland</Text>\n                <Text variant={ isMobile? 'xxLargePlus' : 'mega'}>九州 · 机巧殿</Text>\n                <Text variant=\"large\">To Build Our Novoland Together</Text>\n                <Text variant=\"large\" styles={boldStyle}>\n                    构建属于我们的九州\n                </Text>\n                <DefaultButton\n                    style={{\n                        backgroundColor: (\n                            isDarkMode\n                                ? theme.palette.black\n                                : theme.palette.neutralLight\n                        )\n                    }}\n                    primary={true} disabled={true} text=\"即将现世\" onClick={openPanel}/>\n            </Stack>\n        </>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { FluentCustomizations } from '@uifabric/fluent-theme';\nimport { Customizer, mergeStyles } from 'office-ui-fabric-react';\nimport * as serviceWorker from './serviceWorker';\n\n// Inject some global styles\nmergeStyles({\n  selectors: {\n    ':global(body), :global(html), :global(#root)': {\n      margin: 0,\n      padding: 0,\n      height: '100vh'\n    }\n  }\n});\n\nReactDOM.render(\n  <Customizer {...FluentCustomizations}>\n    <App />\n  </Customizer>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}